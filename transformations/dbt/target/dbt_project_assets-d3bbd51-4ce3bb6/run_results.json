{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.7", "generated_at": "2025-01-30T16:00:22.519255Z", "invocation_id": "075090d0-62d4-4219-a46a-99ab253db3dc", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.945294Z", "completed_at": "2025-01-30T16:00:21.978085Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.044877Z", "completed_at": "2025-01-30T16:00:22.217641Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.4285554885864258, "adapter_response": {}, "message": "Runtime Error in model omny_adoption_by_station (models/omny_adoption_by_station.sql)\n  Catalog Error: Table with name mta_hourly_subway_socrata does not exist!\n  Did you mean \"hourly_weather_asset\"?\n  LINE 17:         \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n      WHERE \n          YEAR(transit_timestamp) IN (2022, 2023, 2024)\n      GROUP BY \n          station_complex, \n          YEAR(transit_timestamp)\n  ),\n  pivoted_data AS (\n      SELECT \n          station_complex,\n          MAX(CASE WHEN year = 2022 THEN omny_percentage ELSE NULL END) AS omny_2022,\n          MAX(CASE WHEN year = 2023 THEN omny_percentage ELSE NULL END) AS omny_2023,\n          MAX(CASE WHEN year = 2024 THEN omny_percentage ELSE NULL END) AS omny_2024\n      FROM \n          yearly_data\n      GROUP BY \n          station_complex\n  )\n  SELECT \n      station_complex,\n      omny_2022,\n      omny_2023,\n      omny_2024,\n      CASE \n          WHEN omny_2022 IS NOT NULL AND omny_2023 IS NOT NULL THEN \n              (omny_2023 - omny_2022) / omny_2022\n          ELSE NULL\n      END AS omny_2023_growth,\n      CASE \n          WHEN omny_2023 IS NOT NULL AND omny_2024 IS NOT NULL THEN \n              (omny_2024 - omny_2023) / omny_2023\n          ELSE NULL\n      END AS omny_2024_growth\n  FROM \n      pivoted_data\n  ORDER BY \n      station_complex\n      );\n    \n    ...\n                   ^", "failures": null, "unique_id": "model.mta.omny_adoption_by_station", "compiled": true, "compiled_code": "WITH yearly_data AS (\n    SELECT \n        station_complex,\n        YEAR(transit_timestamp) AS year,\n        SUM(CASE WHEN payment_method = 'omny' THEN ridership ELSE 0 END) * 1.0 / SUM(ridership) AS omny_percentage\n    FROM \n        \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n    WHERE \n        YEAR(transit_timestamp) IN (2022, 2023, 2024)\n    GROUP BY \n        station_complex, \n        YEAR(transit_timestamp)\n),\npivoted_data AS (\n    SELECT \n        station_complex,\n        MAX(CASE WHEN year = 2022 THEN omny_percentage ELSE NULL END) AS omny_2022,\n        MAX(CASE WHEN year = 2023 THEN omny_percentage ELSE NULL END) AS omny_2023,\n        MAX(CASE WHEN year = 2024 THEN omny_percentage ELSE NULL END) AS omny_2024\n    FROM \n        yearly_data\n    GROUP BY \n        station_complex\n)\nSELECT \n    station_complex,\n    omny_2022,\n    omny_2023,\n    omny_2024,\n    CASE \n        WHEN omny_2022 IS NOT NULL AND omny_2023 IS NOT NULL THEN \n            (omny_2023 - omny_2022) / omny_2022\n        ELSE NULL\n    END AS omny_2023_growth,\n    CASE \n        WHEN omny_2023 IS NOT NULL AND omny_2024 IS NOT NULL THEN \n            (omny_2024 - omny_2023) / omny_2023\n        ELSE NULL\n    END AS omny_2024_growth\nFROM \n    pivoted_data\nORDER BY \n    station_complex", "relation_name": "\"mtastats\".\"main\".\"omny_adoption_by_station\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.903056Z", "completed_at": "2025-01-30T16:00:21.948442Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:21.972865Z", "completed_at": "2025-01-30T16:00:22.190648Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4506409168243408, "adapter_response": {}, "message": "Runtime Error in model avg_riders_per_day (models/avg_riders_per_day.sql)\n  Catalog Error: Table with name mta_hourly_subway_socrata does not exist!\n  Did you mean \"hourly_weather_asset\"?\n  LINE 19:     \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n  GROUP BY \n      station_complex_id, \n      station_complex, \n      latitude, \n      longitude, \n      day_of_week\n  ORDER BY \n      average_ridership DESC\n      );\n    \n    ...\n               ^", "failures": null, "unique_id": "model.mta.avg_riders_per_day", "compiled": true, "compiled_code": "SELECT \n    station_complex_id, \n    station_complex, \n    latitude, \n    longitude, \n    EXTRACT(DAYOFWEEK FROM transit_timestamp) AS day_of_week, \n    AVG(ridership) AS average_ridership\nFROM \n    \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\nGROUP BY \n    station_complex_id, \n    station_complex, \n    latitude, \n    longitude, \n    day_of_week\nORDER BY \n    average_ridership DESC", "relation_name": "\"mtastats\".\"main\".\"avg_riders_per_day\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.932629Z", "completed_at": "2025-01-30T16:00:21.970262Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.030474Z", "completed_at": "2025-01-30T16:00:22.189010Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.43764781951904297, "adapter_response": {}, "message": "Runtime Error in model fare_class_boro (models/fare_class_boro.sql)\n  Catalog Error: Table with name mta_hourly_subway_socrata does not exist!\n  Did you mean \"hourly_weather_asset\"?\n  LINE 36:         \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n      GROUP BY \n          borough, fare_class_category, day_type\n  )\n  SELECT \n      r.borough, \n      r.fare_class_category, \n      r.day_type,\n      r.total_ridership, \n      ROUND(r.total_ridership / t.total_ridership_borough_daytype, 4) AS ridership_percentage\n  FROM \n      ridership_by_fare_class r\n  JOIN \n      total_ridership_per_borough_daytype t\n      ON r.borough = t.borough \n      AND r.day_type = t.day_type\n  ORDER BY \n      total_ridership DESC\n      );\n    \n    ...\n                   ^", "failures": null, "unique_id": "model.mta.fare_class_boro", "compiled": true, "compiled_code": "WITH total_ridership_per_borough_daytype AS (\n    -- Calculate total ridership for each borough and day type (Weekday or Weekend)\n    SELECT \n        borough, \n        CASE \n            WHEN EXTRACT(DAYOFWEEK FROM transit_timestamp) IN (1, 7) THEN 'Weekend'\n            ELSE 'Weekday'\n        END AS day_type,\n        SUM(ridership) AS total_ridership_borough_daytype\n    FROM \n        \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n    GROUP BY \n        borough, day_type\n),\nridership_by_fare_class AS (\n    -- Calculate total ridership by fare class category, borough, and day type (Weekday/Weekend)\n    SELECT \n        borough, \n        fare_class_category, \n        CASE \n            WHEN EXTRACT(DAYOFWEEK FROM transit_timestamp) IN (1, 7) THEN 'Weekend'\n            ELSE 'Weekday'\n        END AS day_type,\n        SUM(ridership) AS total_ridership\n    FROM \n        \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n    GROUP BY \n        borough, fare_class_category, day_type\n)\nSELECT \n    r.borough, \n    r.fare_class_category, \n    r.day_type,\n    r.total_ridership, \n    ROUND(r.total_ridership / t.total_ridership_borough_daytype, 4) AS ridership_percentage\nFROM \n    ridership_by_fare_class r\nJOIN \n    total_ridership_per_borough_daytype t\n    ON r.borough = t.borough \n    AND r.day_type = t.day_type\nORDER BY \n    total_ridership DESC", "relation_name": "\"mtastats\".\"main\".\"fare_class_boro\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.959260Z", "completed_at": "2025-01-30T16:00:22.020663Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.052861Z", "completed_at": "2025-01-30T16:00:22.247128Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.4531707763671875, "adapter_response": {}, "message": "Runtime Error in model total_riders_per_station (models/total_riders_per_station.sql)\n  Catalog Error: Table with name mta_hourly_subway_socrata does not exist!\n  Did you mean \"hourly_weather_asset\"?\n  LINE 18:     \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n  GROUP BY \n      station_complex_id, station_complex, latitude, longitude\n  ORDER BY \n      total_ridership DESC\n      );\n    \n    ...\n               ^", "failures": null, "unique_id": "model.mta.total_riders_per_station", "compiled": true, "compiled_code": "SELECT \n    station_complex_id, \n    station_complex, \n    latitude, \n    longitude, \n    SUM(ridership) AS total_ridership\nFROM \n    \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\nGROUP BY \n    station_complex_id, station_complex, latitude, longitude\nORDER BY \n    total_ridership DESC", "relation_name": "\"mtastats\".\"main\".\"total_riders_per_station\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.954920Z", "completed_at": "2025-01-30T16:00:22.021321Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.057360Z", "completed_at": "2025-01-30T16:00:22.261006Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.45792317390441895, "adapter_response": {}, "message": "Runtime Error in model subway_station_stats (models/subway_station_stats.sql)\n  Catalog Error: Table with name mta_hourly_subway_socrata does not exist!\n  Did you mean \"hourly_weather_asset\"?\n  LINE 22:         \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n      WHERE \n          YEAR(transit_timestamp) = 2024\n      GROUP BY \n          station_complex, \n          CAST(transit_timestamp AS DATE), \n          DAYOFWEEK(transit_timestamp)\n  ),\n  total_riders_ytd AS (\n      -- Total riders in 2023 and 2024 YTD\n      SELECT \n          station_complex,\n          SUM(CASE WHEN YEAR(transit_timestamp) = 2023 THEN ridership ELSE 0 END) AS total_riders_2023,\n          SUM(CASE WHEN YEAR(transit_timestamp) = 2024 THEN ridership ELSE 0 END) AS total_riders_2024,\n          MIN(latitude) AS latitude,   -- Add latitude\n          MIN(longitude) AS longitude  -- Add longitude\n      FROM \n          \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n      WHERE \n          YEAR(transit_timestamp) IN (2023, 2024)\n      GROUP BY \n          station_complex\n  ),\n  weekday_weekend AS (\n      -- Calculate weekday vs. weekend ridership and percentage of transfers\n      SELECT \n          station_complex,\n          CASE \n              WHEN weekday IN (2, 3, 4, 5, 6) THEN 'weekday'\n              ELSE 'weekend'\n          END AS day_type,\n          AVG(daily_ridership) AS avg_ridership,\n          SUM(daily_transfers) * 1.0 / SUM(daily_ridership) AS transfer_percentage\n      FROM \n          ridership_by_day\n      GROUP BY \n          station_complex, \n          CASE \n              WHEN weekday IN (2, 3, 4, 5, 6) THEN 'weekday'\n              ELSE 'weekend'\n          END\n  ),\n  single_day_stats AS (\n      -- Highest and lowest single day ridership\n      SELECT \n          station_complex,\n          MAX(daily_ridership) AS highest_single_day_ridership,\n          MIN(daily_ridership) AS lowest_single_day_ridership\n      FROM \n          ridership_by_day\n      GROUP BY \n          station_complex\n  ),\n  highest_single_day AS (\n      -- Day with highest single day ridership\n      SELECT \n          station_complex,\n          day AS highest_single_day_ridership_day\n      FROM \n          ridership_by_day rbd\n      WHERE \n          rbd.daily_ridership = (\n              SELECT \n                  MAX(daily_ridership)\n              FROM \n                  ridership_by_day\n              WHERE \n                  station_complex = rbd.station_complex\n          )\n  ),\n  lowest_single_day AS (\n      -- Day with lowest single day ridership\n      SELECT \n          station_complex,\n          day AS lowest_single_day_ridership_day\n      FROM \n          ridership_by_day rbd\n      WHERE \n          rbd.daily_ridership = (\n              SELECT \n                  MIN(daily_ridership)\n              FROM \n                  ridership_by_day\n              WHERE \n                  station_complex = rbd.station_complex\n          )\n  )\n  SELECT \n      rbd.station_complex,\n      MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.avg_ridership END) AS avg_weekday_ridership,\n      MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.avg_ridership END) AS avg_weekend_ridership,\n      sds.highest_single_day_ridership,\n      hsd.highest_single_day_ridership_day,\n      sds.lowest_single_day_ridership,\n      lsd.lowest_single_day_ridership_day,\n      MAX(ty.total_riders_2023) AS total_riders_2023,\n      MAX(ty.total_riders_2024) AS total_riders_2024,\n      MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.transfer_percentage END) AS weekday_transfer_percentage,\n      MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.transfer_percentage END) AS weekend_transfer_percentage,\n      (MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.avg_ridership END) - MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.avg_ridership END)) * 1.0 / MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.avg_ridership END) AS weekend_ridership_percentage_change,\n      (MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.transfer_percentage END) - MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.transfer_percentage END)) * 1.0 / MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.transfer_percentage END) AS weekend_transfer_percentage_change,\n      MAX(rbd.latitude) AS latitude,   -- Add latitude\n      MAX(rbd.longitude) AS longitude  -- Add longitude\n  FROM \n      ridership_by_day rbd\n  JOIN \n      weekday_weekend wwd ON rbd.station_complex = wwd.station_complex\n  JOIN \n      single_day_stats sds ON rbd.station_complex = sds.station_complex\n  JOIN \n      highest_single_day hsd ON rbd.station_complex = hsd.station_complex\n  JOIN \n      lowest_single_day lsd ON rbd.station_complex = lsd.station_complex\n  JOIN \n      total_riders_ytd ty ON rbd.station_complex = ty.station_complex\n  GROUP BY \n      rbd.station_complex, \n      sds.highest_single_day_ridership, \n      sds.lowest_single_day_ridership, \n      hsd.highest_single_day_ridership_day, \n      lsd.lowest_single_day_ridership_day\n  ORDER BY \n      rbd.station_complex\n      );\n    \n    ...\n                   ^", "failures": null, "unique_id": "model.mta.subway_station_stats", "compiled": true, "compiled_code": "WITH ridership_by_day AS (\n    -- Calculate daily ridership for each station, weekday/weekend split\n    SELECT \n        station_complex,\n        CAST(transit_timestamp AS DATE) AS day,\n        DAYOFWEEK(transit_timestamp) AS weekday,\n        SUM(ridership) AS daily_ridership,\n        SUM(transfers) AS daily_transfers,\n        MIN(latitude) AS latitude,   -- Add latitude\n        MIN(longitude) AS longitude  -- Add longitude\n    FROM \n        \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n    WHERE \n        YEAR(transit_timestamp) = 2024\n    GROUP BY \n        station_complex, \n        CAST(transit_timestamp AS DATE), \n        DAYOFWEEK(transit_timestamp)\n),\ntotal_riders_ytd AS (\n    -- Total riders in 2023 and 2024 YTD\n    SELECT \n        station_complex,\n        SUM(CASE WHEN YEAR(transit_timestamp) = 2023 THEN ridership ELSE 0 END) AS total_riders_2023,\n        SUM(CASE WHEN YEAR(transit_timestamp) = 2024 THEN ridership ELSE 0 END) AS total_riders_2024,\n        MIN(latitude) AS latitude,   -- Add latitude\n        MIN(longitude) AS longitude  -- Add longitude\n    FROM \n        \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n    WHERE \n        YEAR(transit_timestamp) IN (2023, 2024)\n    GROUP BY \n        station_complex\n),\nweekday_weekend AS (\n    -- Calculate weekday vs. weekend ridership and percentage of transfers\n    SELECT \n        station_complex,\n        CASE \n            WHEN weekday IN (2, 3, 4, 5, 6) THEN 'weekday'\n            ELSE 'weekend'\n        END AS day_type,\n        AVG(daily_ridership) AS avg_ridership,\n        SUM(daily_transfers) * 1.0 / SUM(daily_ridership) AS transfer_percentage\n    FROM \n        ridership_by_day\n    GROUP BY \n        station_complex, \n        CASE \n            WHEN weekday IN (2, 3, 4, 5, 6) THEN 'weekday'\n            ELSE 'weekend'\n        END\n),\nsingle_day_stats AS (\n    -- Highest and lowest single day ridership\n    SELECT \n        station_complex,\n        MAX(daily_ridership) AS highest_single_day_ridership,\n        MIN(daily_ridership) AS lowest_single_day_ridership\n    FROM \n        ridership_by_day\n    GROUP BY \n        station_complex\n),\nhighest_single_day AS (\n    -- Day with highest single day ridership\n    SELECT \n        station_complex,\n        day AS highest_single_day_ridership_day\n    FROM \n        ridership_by_day rbd\n    WHERE \n        rbd.daily_ridership = (\n            SELECT \n                MAX(daily_ridership)\n            FROM \n                ridership_by_day\n            WHERE \n                station_complex = rbd.station_complex\n        )\n),\nlowest_single_day AS (\n    -- Day with lowest single day ridership\n    SELECT \n        station_complex,\n        day AS lowest_single_day_ridership_day\n    FROM \n        ridership_by_day rbd\n    WHERE \n        rbd.daily_ridership = (\n            SELECT \n                MIN(daily_ridership)\n            FROM \n                ridership_by_day\n            WHERE \n                station_complex = rbd.station_complex\n        )\n)\nSELECT \n    rbd.station_complex,\n    MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.avg_ridership END) AS avg_weekday_ridership,\n    MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.avg_ridership END) AS avg_weekend_ridership,\n    sds.highest_single_day_ridership,\n    hsd.highest_single_day_ridership_day,\n    sds.lowest_single_day_ridership,\n    lsd.lowest_single_day_ridership_day,\n    MAX(ty.total_riders_2023) AS total_riders_2023,\n    MAX(ty.total_riders_2024) AS total_riders_2024,\n    MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.transfer_percentage END) AS weekday_transfer_percentage,\n    MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.transfer_percentage END) AS weekend_transfer_percentage,\n    (MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.avg_ridership END) - MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.avg_ridership END)) * 1.0 / MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.avg_ridership END) AS weekend_ridership_percentage_change,\n    (MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.transfer_percentage END) - MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.transfer_percentage END)) * 1.0 / MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.transfer_percentage END) AS weekend_transfer_percentage_change,\n    MAX(rbd.latitude) AS latitude,   -- Add latitude\n    MAX(rbd.longitude) AS longitude  -- Add longitude\nFROM \n    ridership_by_day rbd\nJOIN \n    weekday_weekend wwd ON rbd.station_complex = wwd.station_complex\nJOIN \n    single_day_stats sds ON rbd.station_complex = sds.station_complex\nJOIN \n    highest_single_day hsd ON rbd.station_complex = hsd.station_complex\nJOIN \n    lowest_single_day lsd ON rbd.station_complex = lsd.station_complex\nJOIN \n    total_riders_ytd ty ON rbd.station_complex = ty.station_complex\nGROUP BY \n    rbd.station_complex, \n    sds.highest_single_day_ridership, \n    sds.lowest_single_day_ridership, \n    hsd.highest_single_day_ridership_day, \n    lsd.lowest_single_day_ridership_day\nORDER BY \n    rbd.station_complex", "relation_name": "\"mtastats\".\"main\".\"subway_station_stats\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.949568Z", "completed_at": "2025-01-30T16:00:22.018979Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.049125Z", "completed_at": "2025-01-30T16:00:22.253663Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.46033167839050293, "adapter_response": {}, "message": "Runtime Error in model omny_adoption_increase (models/omny_adoption_increase.sql)\n  Catalog Error: Table with name mta_hourly_subway_socrata does not exist!\n  Did you mean \"hourly_weather_asset\"?\n  LINE 22:         \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n      WHERE \n          EXTRACT(YEAR FROM transit_timestamp) IN (2023, 2024)\n      GROUP BY \n          station_complex_id, station_complex, latitude, longitude, year\n  ),\n  omny_percentage_by_station AS (\n      -- Calculate the OMNY percentage for each station in 2023 and 2024, including latitude and longitude\n      SELECT \n          station_complex_id, \n          station_complex, \n          latitude, \n          longitude, \n          year, \n          (omny_ridership / total_ridership) AS omny_percentage\n      FROM \n          omny_ridership_by_station_year\n  )\n  SELECT \n      s2023.station_complex_id AS station_id, \n      s2023.station_complex AS station_name,\n      s2023.latitude,\n      s2023.longitude,\n      s2023.omny_percentage AS omny_percentage_2023,\n      s2024.omny_percentage AS omny_percentage_2024,\n      (s2024.omny_percentage - s2023.omny_percentage) AS omny_percentage_increase\n  FROM \n      omny_percentage_by_station s2023\n  JOIN \n      omny_percentage_by_station s2024 \n      ON s2023.station_complex_id = s2024.station_complex_id\n      AND s2023.latitude = s2024.latitude\n      AND s2023.longitude = s2024.longitude\n      AND s2023.year = 2023\n      AND s2024.year = 2024\n  WHERE \n      s2024.omny_percentage > s2023.omny_percentage\n  ORDER BY \n      omny_percentage_increase DESC\n      );\n    \n    ...\n                   ^", "failures": null, "unique_id": "model.mta.omny_adoption_increase", "compiled": true, "compiled_code": "WITH omny_ridership_by_station_year AS (\n    -- Calculate the OMNY ridership and total ridership for each station in 2023 and 2024, including latitude and longitude\n    SELECT \n        station_complex_id, \n        station_complex, \n        latitude, \n        longitude, \n        EXTRACT(YEAR FROM transit_timestamp) AS year, \n        SUM(CASE WHEN payment_method = 'omny' THEN ridership ELSE 0 END) AS omny_ridership,\n        SUM(ridership) AS total_ridership\n    FROM \n        \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n    WHERE \n        EXTRACT(YEAR FROM transit_timestamp) IN (2023, 2024)\n    GROUP BY \n        station_complex_id, station_complex, latitude, longitude, year\n),\nomny_percentage_by_station AS (\n    -- Calculate the OMNY percentage for each station in 2023 and 2024, including latitude and longitude\n    SELECT \n        station_complex_id, \n        station_complex, \n        latitude, \n        longitude, \n        year, \n        (omny_ridership / total_ridership) AS omny_percentage\n    FROM \n        omny_ridership_by_station_year\n)\nSELECT \n    s2023.station_complex_id AS station_id, \n    s2023.station_complex AS station_name,\n    s2023.latitude,\n    s2023.longitude,\n    s2023.omny_percentage AS omny_percentage_2023,\n    s2024.omny_percentage AS omny_percentage_2024,\n    (s2024.omny_percentage - s2023.omny_percentage) AS omny_percentage_increase\nFROM \n    omny_percentage_by_station s2023\nJOIN \n    omny_percentage_by_station s2024 \n    ON s2023.station_complex_id = s2024.station_complex_id\n    AND s2023.latitude = s2024.latitude\n    AND s2023.longitude = s2024.longitude\n    AND s2023.year = 2023\n    AND s2024.year = 2024\nWHERE \n    s2024.omny_percentage > s2023.omny_percentage\nORDER BY \n    omny_percentage_increase DESC", "relation_name": "\"mtastats\".\"main\".\"omny_adoption_increase\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.962506Z", "completed_at": "2025-01-30T16:00:22.025971Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.063614Z", "completed_at": "2025-01-30T16:00:22.310453Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.48779845237731934, "adapter_response": {}, "message": "Runtime Error in model weekly_riders_per_station (models/weekly_riders_per_station.sql)\n  Catalog Error: Table with name mta_hourly_subway_socrata does not exist!\n  Did you mean \"hourly_weather_asset\"?\n  LINE 19:         \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n      GROUP BY \n          station_complex, \n          DATE_TRUNC('week', transit_timestamp)\n  ),\n  weekly_weather AS (\n      SELECT \n          DATE_TRUNC('week', date) AS week_start,\n          AVG(temperature_mean) AS avg_weekly_temperature,\n          SUM(precipitation_sum) AS total_weekly_precipitation\n      FROM \n          \"mtastats\".\"main\".\"daily_weather_asset\"\n      GROUP BY \n          DATE_TRUNC('week', date)\n  )\n  SELECT \n      wr.station_complex, \n      wr.week_start, \n      wr.total_weekly_ridership,\n      wr.latitude,\n      wr.longitude,\n      ww.avg_weekly_temperature,\n      ww.total_weekly_precipitation\n  FROM \n      weekly_ridership wr\n  LEFT JOIN \n      weekly_weather ww\n  ON \n      wr.week_start = ww.week_start\n  WHERE \n      wr.week_start < '2024-09-17'\n  ORDER BY \n      wr.station_complex, \n      wr.week_start\n      );\n    \n    ...\n                   ^", "failures": null, "unique_id": "model.mta.weekly_riders_per_station", "compiled": true, "compiled_code": "WITH weekly_ridership AS (\n    SELECT \n        station_complex, \n        DATE_TRUNC('week', transit_timestamp) AS week_start,\n        SUM(ridership) AS total_weekly_ridership,\n        MIN(latitude) AS latitude,  -- Assuming latitude is the same for each station complex, use MIN() or MAX()\n        MIN(longitude) AS longitude  -- Assuming longitude is the same for each station complex, use MIN() or MAX()\n    FROM \n        \"mtastats\".\"main\".\"mta_hourly_subway_socrata\"\n    GROUP BY \n        station_complex, \n        DATE_TRUNC('week', transit_timestamp)\n),\nweekly_weather AS (\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        AVG(temperature_mean) AS avg_weekly_temperature,\n        SUM(precipitation_sum) AS total_weekly_precipitation\n    FROM \n        \"mtastats\".\"main\".\"daily_weather_asset\"\n    GROUP BY \n        DATE_TRUNC('week', date)\n)\nSELECT \n    wr.station_complex, \n    wr.week_start, \n    wr.total_weekly_ridership,\n    wr.latitude,\n    wr.longitude,\n    ww.avg_weekly_temperature,\n    ww.total_weekly_precipitation\nFROM \n    weekly_ridership wr\nLEFT JOIN \n    weekly_weather ww\nON \n    wr.week_start = ww.week_start\nWHERE \n    wr.week_start < '2024-09-17'\nORDER BY \n    wr.station_complex, \n    wr.week_start", "relation_name": "\"mtastats\".\"main\".\"weekly_riders_per_station\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.921625Z", "completed_at": "2025-01-30T16:00:21.968153Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.021957Z", "completed_at": "2025-01-30T16:00:22.430094Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5425434112548828, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.mta.daily_ridership", "compiled": true, "compiled_code": "WITH ridership_data AS (\n    SELECT  \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(subways_total_ridership) AS ridership,\n        'Subway' AS transport_type,\n        AVG(subways_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"mtastats\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(buses_total_ridership) AS ridership,\n        'Buses' AS transport_type,\n        AVG(buses_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"mtastats\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(lirr_total_ridership) AS ridership,\n        'LIRR' AS transport_type,\n        AVG(lirr_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"mtastats\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(metro_north_total_ridership) AS ridership,\n        'Metro North' AS transport_type,\n        AVG(metro_north_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"mtastats\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(access_a_ride_total_trips) AS ridership,\n        'Access-A-Ride' AS transport_type,\n        AVG(access_a_ride_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"mtastats\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(bridges_tunnels_total_traffic) AS ridership,\n        'Bridges and Tunnels' AS transport_type,\n        AVG(bridges_tunnels_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"mtastats\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(staten_island_railway_total_ridership) AS ridership,\n        'Staten Island Railway' AS transport_type,\n        AVG(staten_island_railway_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"mtastats\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n),\nweather_data AS (\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        AVG(temperature_mean) AS avg_weekly_temperature,\n        SUM(precipitation_sum) AS total_weekly_precipitation\n    FROM \n        daily_weather_asset\n    GROUP BY \n        DATE_TRUNC('week', date)\n)\nSELECT \n    rd.week_start, \n    rd.transport_type,\n    rd.ridership,\n    rd.avg_pct_pre_pandemic,\n    wd.avg_weekly_temperature,\n    wd.total_weekly_precipitation\nFROM \n    ridership_data rd\nLEFT JOIN \n    weather_data wd\nON \n    rd.week_start = wd.week_start\nWHERE \n    rd.week_start < '2024-10-15'\nORDER BY \n    rd.week_start, rd.transport_type", "relation_name": "\"mtastats\".\"main\".\"daily_ridership\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.927782Z", "completed_at": "2025-01-30T16:00:21.969509Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.026708Z", "completed_at": "2025-01-30T16:00:22.436194Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5541296005249023, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.mta.expense_type_per_year", "compiled": true, "compiled_code": "SELECT \n    agency,\n    fiscal_year,\n    general_ledger,\n    SUM(amount) AS total_expenses\nFROM \n    \"mtastats\".\"main\".\"mta_operations_statement\"\nWHERE \n    scenario = 'Actual'\n    AND type = 'Total Expenses Before Non-Cash Liability Adjs.'\nGROUP BY \n    agency,\n    fiscal_year,\n    general_ledger\nORDER BY \n    agency, fiscal_year, general_ledger", "relation_name": "\"mtastats\".\"main\".\"expense_type_per_year\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.941662Z", "completed_at": "2025-01-30T16:00:21.972278Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.040971Z", "completed_at": "2025-01-30T16:00:22.438018Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.5520317554473877, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.mta.labor_expenses_per_agency", "compiled": true, "compiled_code": "SELECT \n    agency_full_name,\n    financial_plan_year,\n    expense_type,\n    general_ledger,\n    SUM(amount) AS total_labor_expenses\nFROM \n    \"mtastats\".\"main\".\"mta_operations_statement\"\nWHERE \n    subtype = 'Labor Expenses' AND \n    scenario = 'Actual'\nGROUP BY \n    agency_full_name,\n    financial_plan_year,\n    expense_type,\n    general_ledger\nORDER BY \n    agency_full_name, financial_plan_year, expense_type, general_ledger", "relation_name": "\"mtastats\".\"main\".\"labor_expenses_per_agency\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.914257Z", "completed_at": "2025-01-30T16:00:21.954125Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.006206Z", "completed_at": "2025-01-30T16:00:22.441234Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5657689571380615, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.mta.bond_payment_info", "compiled": true, "compiled_code": "WITH payment_stats AS (\n    SELECT\n        general_ledger,\n        MIN(timestamp) AS first_payment_date,\n        MAX(timestamp) AS last_payment_date,\n        AVG(amount) AS average_payment,\n        COUNT(DISTINCT timestamp) AS total_payments,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY amount) AS median_payment\n    FROM\n        \"mtastats\".\"main\".\"mta_operations_statement\"\n    WHERE\n        scenario = 'Actual'\n        AND type = 'Debt Service Expenses'\n    GROUP BY\n        general_ledger\n),\nfirst_payment AS (\n    SELECT\n        general_ledger,\n        MIN(timestamp) AS first_payment_date,\n        (SELECT amount FROM mta_operations_statement WHERE general_ledger = fp.general_ledger AND timestamp = MIN(fp.timestamp)) AS first_payment_amount\n    FROM\n        mta_operations_statement fp\n    WHERE\n        scenario = 'Actual'\n        AND type = 'Debt Service Expenses'\n    GROUP BY\n        general_ledger\n),\nlast_payment AS (\n    SELECT\n        general_ledger,\n        MAX(timestamp) AS last_payment_date,\n        (SELECT amount FROM mta_operations_statement WHERE general_ledger = lp.general_ledger AND timestamp = MAX(lp.timestamp)) AS last_payment_amount\n    FROM\n        mta_operations_statement lp\n    WHERE\n        scenario = 'Actual'\n        AND type = 'Debt Service Expenses'\n    GROUP BY\n        general_ledger\n)\n-- Wrapping everything inside another DISTINCT query\nSELECT DISTINCT\n    ps.general_ledger,\n    fp.first_payment_date,\n    fp.first_payment_amount,\n    ps.last_payment_date,\n    lp.last_payment_amount,\n    ps.average_payment,\n    ps.median_payment,\n    ps.total_payments\nFROM\n    payment_stats ps\nLEFT JOIN\n    first_payment fp ON ps.general_ledger = fp.general_ledger\nLEFT JOIN\n    last_payment lp ON ps.general_ledger = lp.general_ledger\nORDER BY\n    ps.general_ledger", "relation_name": "\"mtastats\".\"main\".\"bond_payment_info\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-01-30T16:00:21.937134Z", "completed_at": "2025-01-30T16:00:21.970890Z"}, {"name": "execute", "started_at": "2025-01-30T16:00:22.034361Z", "completed_at": "2025-01-30T16:00:22.443962Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.5900042057037354, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.mta.forecast_accuracy_2023", "compiled": true, "compiled_code": "SELECT \n    agency_full_name,\n    general_ledger,\n    expense_type,\n\n    -- Total amounts for Adopted Budget by Financial Plan Year\n    SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2019 \n        THEN amount \n        ELSE 0 \n    END) AS total_adopted_budget_2019,\n\n    SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2020 \n        THEN amount \n        ELSE 0 \n    END) AS total_adopted_budget_2020,\n\n    SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2021 \n        THEN amount \n        ELSE 0 \n    END) AS total_adopted_budget_2021,\n\n    SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2022 \n        THEN amount \n        ELSE 0 \n    END) AS total_adopted_budget_2022,\n\n    -- Total amount for Actual 2023\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) AS total_actual_2023,\n\n    -- Differences between Actual and Adopted Budget for each year\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) - SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2019 \n        THEN amount \n        ELSE 0 \n    END) AS difference_2019_vs_actual,\n\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) - SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2020 \n        THEN amount \n        ELSE 0 \n    END) AS difference_2020_vs_actual,\n\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) - SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2021 \n        THEN amount \n        ELSE 0 \n    END) AS difference_2021_vs_actual,\n\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) - SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2022 \n        THEN amount \n        ELSE 0 \n    END) AS difference_2022_vs_actual,\n\n    -- Percentage differences for each year\n    CASE \n        WHEN SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2019 \n            THEN amount \n            ELSE 0 \n        END) <> 0 \n        THEN (SUM(CASE \n            WHEN scenario = 'Actual' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2023 \n            THEN amount \n            ELSE 0 \n        END) - SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2019 \n            THEN amount \n            ELSE 0 \n        END)) / SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2019 \n            THEN amount \n            ELSE 0 \n        END)\n        ELSE NULL \n    END AS percentage_diff_2019_vs_actual,\n\n    CASE \n        WHEN SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2020 \n            THEN amount \n            ELSE 0 \n        END) <> 0 \n        THEN (SUM(CASE \n            WHEN scenario = 'Actual' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2023 \n            THEN amount \n            ELSE 0 \n        END) - SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2020 \n            THEN amount \n            ELSE 0 \n        END)) / SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2020 \n            THEN amount \n            ELSE 0 \n        END)\n        ELSE NULL \n    END AS percentage_diff_2020_vs_actual,\n\n    CASE \n        WHEN SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2021 \n            THEN amount \n            ELSE 0 \n        END) <> 0 \n        THEN (SUM(CASE \n            WHEN scenario = 'Actual' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2023 \n            THEN amount \n            ELSE 0 \n        END) - SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2021 \n            THEN amount \n            ELSE 0 \n        END)) / SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2021 \n            THEN amount \n            ELSE 0 \n        END)\n        ELSE NULL \n    END AS percentage_diff_2021_vs_actual,\n\n    CASE \n        WHEN SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2022 \n            THEN amount \n            ELSE 0 \n        END) <> 0 \n        THEN (SUM(CASE \n            WHEN scenario = 'Actual' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2023 \n            THEN amount \n            ELSE 0 \n        END) - SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2022 \n            THEN amount \n            ELSE 0 \n        END)) / SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2022 \n            THEN amount \n            ELSE 0 \n        END)\n        ELSE NULL \n    END AS percentage_diff_2022_vs_actual\n\nFROM \"mtastats\".\"main\".\"mta_operations_statement\"\nWHERE type = 'Total Expenses Before Non-Cash Liability Adjs.'\nGROUP BY agency_full_name, general_ledger, expense_type", "relation_name": "\"mtastats\".\"main\".\"forecast_accuracy_2023\""}], "elapsed_time": 0.8900649547576904, "args": {"introspect": true, "exclude": [], "vars": {}, "quiet": false, "project_dir": "/home/christiandata/mtadata/mta/transformations/dbt", "source_freshness_run_project_hooks": false, "export_saved_queries": false, "log_format_file": "json", "use_colors_file": true, "show_resource_report": false, "printer_width": 80, "log_level_file": "debug", "static_parser": true, "use_colors": true, "require_explicit_package_overrides_for_builtin_materializations": true, "version_check": true, "partial_parse": true, "resource_types": [], "log_level": "info", "print": true, "show": false, "cache_selected_only": false, "select": ["fqn:*"], "log_format": "json", "empty": false, "include_saved_query": false, "invocation_command": "dbt build --select fqn:*", "which": "build", "profiles_dir": "/home/christiandata/mtadata/mta/transformations/dbt", "populate_cache": true, "require_resource_names_without_spaces": false, "indirect_selection": "eager", "send_anonymous_usage_stats": false, "partial_parse_file_diff": true, "log_path": "/home/christiandata/mtadata/mta/transformations/dbt/target/dbt_project_assets-d3bbd51-4ce3bb6", "log_file_max_bytes": 10485760, "target_path": "target/dbt_project_assets-d3bbd51-4ce3bb6", "macro_debugging": false, "write_json": true, "favor_state": false, "strict_mode": false, "warn_error_options": {"include": [], "exclude": []}, "enable_legacy_logger": false, "defer": false, "exclude_resource_types": []}}