{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.8", "generated_at": "2025-03-12T22:17:09.052430Z", "invocation_id": "85319230-fef5-46ff-9158-ea23743dac0a", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.060585Z", "completed_at": "2025-03-12T22:17:08.267324Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.426963Z", "completed_at": "2025-03-12T22:17:08.726491Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8775796890258789, "adapter_response": {}, "message": "Runtime Error in model daily_ridership (models/daily_ridership.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_daily_ridership/*.parquet\"", "failures": null, "unique_id": "model.mta.daily_ridership", "compiled": true, "compiled_code": "WITH ridership_data AS (\n    SELECT  \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(subways_total_ridership) AS ridership,\n        'Subway' AS transport_type,\n        AVG(subways_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"data\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(buses_total_ridership) AS ridership,\n        'Buses' AS transport_type,\n        AVG(buses_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"data\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(lirr_total_ridership) AS ridership,\n        'LIRR' AS transport_type,\n        AVG(lirr_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"data\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(metro_north_total_ridership) AS ridership,\n        'Metro North' AS transport_type,\n        AVG(metro_north_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"data\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(access_a_ride_total_trips) AS ridership,\n        'Access-A-Ride' AS transport_type,\n        AVG(access_a_ride_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"data\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(bridges_tunnels_total_traffic) AS ridership,\n        'Bridges and Tunnels' AS transport_type,\n        AVG(bridges_tunnels_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"data\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n\n    UNION ALL\n\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        SUM(staten_island_railway_total_ridership) AS ridership,\n        'Staten Island Railway' AS transport_type,\n        AVG(staten_island_railway_pct_pre_pandemic) AS avg_pct_pre_pandemic\n    FROM \"data\".\"main\".\"mta_daily_ridership\"\n    GROUP BY week_start, transport_type\n),\nweather_data AS (\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        AVG(temperature_mean) AS avg_weekly_temperature,\n        SUM(precipitation_sum) AS total_weekly_precipitation\n    FROM \n        daily_weather_asset\n    GROUP BY \n        DATE_TRUNC('week', date)\n)\nSELECT \n    rd.week_start, \n    rd.transport_type,\n    rd.ridership,\n    rd.avg_pct_pre_pandemic,\n    wd.avg_weekly_temperature,\n    wd.total_weekly_precipitation\nFROM \n    ridership_data rd\nLEFT JOIN \n    weather_data wd\nON \n    rd.week_start = wd.week_start\nWHERE \n    rd.week_start < '2024-10-15'\nORDER BY \n    rd.week_start, rd.transport_type", "relation_name": "\"data\".\"main\".\"daily_ridership\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.179541Z", "completed_at": "2025-03-12T22:17:08.273919Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.463491Z", "completed_at": "2025-03-12T22:17:08.724289Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.8729970455169678, "adapter_response": {}, "message": "Runtime Error in model labor_expenses_per_agency (models/labor_expenses_per_agency.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_operations_statement/*.parquet\"", "failures": null, "unique_id": "model.mta.labor_expenses_per_agency", "compiled": true, "compiled_code": "SELECT \n    agency_full_name,\n    financial_plan_year,\n    expense_type,\n    general_ledger,\n    SUM(amount) AS total_labor_expenses\nFROM \n    \"data\".\"main\".\"mta_operations_statement\"\nWHERE \n    subtype = 'Labor Expenses' AND \n    scenario = 'Actual'\nGROUP BY \n    agency_full_name,\n    financial_plan_year,\n    expense_type,\n    general_ledger\nORDER BY \n    agency_full_name, financial_plan_year, expense_type, general_ledger", "relation_name": "\"data\".\"main\".\"labor_expenses_per_agency\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.153235Z", "completed_at": "2025-03-12T22:17:08.265866Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.417587Z", "completed_at": "2025-03-12T22:17:08.714390Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.885077953338623, "adapter_response": {}, "message": "Runtime Error in model expense_type_per_year (models/expense_type_per_year.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_operations_statement/*.parquet\"", "failures": null, "unique_id": "model.mta.expense_type_per_year", "compiled": true, "compiled_code": "SELECT \n    agency,\n    fiscal_year,\n    general_ledger,\n    SUM(amount) AS total_expenses\nFROM \n    \"data\".\"main\".\"mta_operations_statement\"\nWHERE \n    scenario = 'Actual'\n    AND type = 'Total Expenses Before Non-Cash Liability Adjs.'\nGROUP BY \n    agency,\n    fiscal_year,\n    general_ledger\nORDER BY \n    agency, fiscal_year, general_ledger", "relation_name": "\"data\".\"main\".\"expense_type_per_year\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.165209Z", "completed_at": "2025-03-12T22:17:08.269226Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.445998Z", "completed_at": "2025-03-12T22:17:08.720170Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.8854713439941406, "adapter_response": {}, "message": "Runtime Error in model fare_class_boro (models/fare_class_boro.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_hourly_subway_socrata/*.parquet\"", "failures": null, "unique_id": "model.mta.fare_class_boro", "compiled": true, "compiled_code": "WITH total_ridership_per_borough_daytype AS (\n    -- Calculate total ridership for each borough and day type (Weekday or Weekend)\n    SELECT \n        borough, \n        CASE \n            WHEN EXTRACT(DAYOFWEEK FROM transit_timestamp) IN (1, 7) THEN 'Weekend'\n            ELSE 'Weekday'\n        END AS day_type,\n        SUM(ridership) AS total_ridership_borough_daytype\n    FROM \n        \"data\".\"main\".\"mta_hourly_subway_socrata\"\n    GROUP BY \n        borough, day_type\n),\nridership_by_fare_class AS (\n    -- Calculate total ridership by fare class category, borough, and day type (Weekday/Weekend)\n    SELECT \n        borough, \n        fare_class_category, \n        CASE \n            WHEN EXTRACT(DAYOFWEEK FROM transit_timestamp) IN (1, 7) THEN 'Weekend'\n            ELSE 'Weekday'\n        END AS day_type,\n        SUM(ridership) AS total_ridership\n    FROM \n        \"data\".\"main\".\"mta_hourly_subway_socrata\"\n    GROUP BY \n        borough, fare_class_category, day_type\n)\nSELECT \n    r.borough, \n    r.fare_class_category, \n    r.day_type,\n    r.total_ridership, \n    ROUND(r.total_ridership / t.total_ridership_borough_daytype, 4) AS ridership_percentage\nFROM \n    ridership_by_fare_class r\nJOIN \n    total_ridership_per_borough_daytype t\n    ON r.borough = t.borough \n    AND r.day_type = t.day_type\nORDER BY \n    total_ridership DESC", "relation_name": "\"data\".\"main\".\"fare_class_boro\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.025223Z", "completed_at": "2025-03-12T22:17:08.236873Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.277921Z", "completed_at": "2025-03-12T22:17:08.706874Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9142191410064697, "adapter_response": {}, "message": "Runtime Error in model avg_riders_per_day (models/avg_riders_per_day.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_hourly_subway_socrata/*.parquet\"", "failures": null, "unique_id": "model.mta.avg_riders_per_day", "compiled": true, "compiled_code": "SELECT \n    station_complex_id, \n    station_complex, \n    latitude, \n    longitude, \n    EXTRACT(DAYOFWEEK FROM transit_timestamp) AS day_of_week, \n    AVG(ridership) AS average_ridership\nFROM \n    \"data\".\"main\".\"mta_hourly_subway_socrata\"\nGROUP BY \n    station_complex_id, \n    station_complex, \n    latitude, \n    longitude, \n    day_of_week\nORDER BY \n    average_ridership DESC", "relation_name": "\"data\".\"main\".\"avg_riders_per_day\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.172066Z", "completed_at": "2025-03-12T22:17:08.272215Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.455470Z", "completed_at": "2025-03-12T22:17:08.728277Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.8902866840362549, "adapter_response": {}, "message": "Runtime Error in model forecast_accuracy_2023 (models/forecast_accuracy_2023.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_operations_statement/*.parquet\"", "failures": null, "unique_id": "model.mta.forecast_accuracy_2023", "compiled": true, "compiled_code": "SELECT \n    agency_full_name,\n    general_ledger,\n    expense_type,\n\n    -- Total amounts for Adopted Budget by Financial Plan Year\n    SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2019 \n        THEN amount \n        ELSE 0 \n    END) AS total_adopted_budget_2019,\n\n    SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2020 \n        THEN amount \n        ELSE 0 \n    END) AS total_adopted_budget_2020,\n\n    SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2021 \n        THEN amount \n        ELSE 0 \n    END) AS total_adopted_budget_2021,\n\n    SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2022 \n        THEN amount \n        ELSE 0 \n    END) AS total_adopted_budget_2022,\n\n    -- Total amount for Actual 2023\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) AS total_actual_2023,\n\n    -- Differences between Actual and Adopted Budget for each year\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) - SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2019 \n        THEN amount \n        ELSE 0 \n    END) AS difference_2019_vs_actual,\n\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) - SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2020 \n        THEN amount \n        ELSE 0 \n    END) AS difference_2020_vs_actual,\n\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) - SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2021 \n        THEN amount \n        ELSE 0 \n    END) AS difference_2021_vs_actual,\n\n    SUM(CASE \n        WHEN scenario = 'Actual' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2023 \n        THEN amount \n        ELSE 0 \n    END) - SUM(CASE \n        WHEN scenario = 'Adopted Budget' \n            AND fiscal_year = 2023 \n            AND financial_plan_year = 2022 \n        THEN amount \n        ELSE 0 \n    END) AS difference_2022_vs_actual,\n\n    -- Percentage differences for each year\n    CASE \n        WHEN SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2019 \n            THEN amount \n            ELSE 0 \n        END) <> 0 \n        THEN (SUM(CASE \n            WHEN scenario = 'Actual' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2023 \n            THEN amount \n            ELSE 0 \n        END) - SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2019 \n            THEN amount \n            ELSE 0 \n        END)) / SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2019 \n            THEN amount \n            ELSE 0 \n        END)\n        ELSE NULL \n    END AS percentage_diff_2019_vs_actual,\n\n    CASE \n        WHEN SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2020 \n            THEN amount \n            ELSE 0 \n        END) <> 0 \n        THEN (SUM(CASE \n            WHEN scenario = 'Actual' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2023 \n            THEN amount \n            ELSE 0 \n        END) - SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2020 \n            THEN amount \n            ELSE 0 \n        END)) / SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2020 \n            THEN amount \n            ELSE 0 \n        END)\n        ELSE NULL \n    END AS percentage_diff_2020_vs_actual,\n\n    CASE \n        WHEN SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2021 \n            THEN amount \n            ELSE 0 \n        END) <> 0 \n        THEN (SUM(CASE \n            WHEN scenario = 'Actual' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2023 \n            THEN amount \n            ELSE 0 \n        END) - SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2021 \n            THEN amount \n            ELSE 0 \n        END)) / SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2021 \n            THEN amount \n            ELSE 0 \n        END)\n        ELSE NULL \n    END AS percentage_diff_2021_vs_actual,\n\n    CASE \n        WHEN SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2022 \n            THEN amount \n            ELSE 0 \n        END) <> 0 \n        THEN (SUM(CASE \n            WHEN scenario = 'Actual' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2023 \n            THEN amount \n            ELSE 0 \n        END) - SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2022 \n            THEN amount \n            ELSE 0 \n        END)) / SUM(CASE \n            WHEN scenario = 'Adopted Budget' \n                AND fiscal_year = 2023 \n                AND financial_plan_year = 2022 \n            THEN amount \n            ELSE 0 \n        END)\n        ELSE NULL \n    END AS percentage_diff_2022_vs_actual\n\nFROM \"data\".\"main\".\"mta_operations_statement\"\nWHERE type = 'Total Expenses Before Non-Cash Liability Adjs.'\nGROUP BY agency_full_name, general_ledger, expense_type", "relation_name": "\"data\".\"main\".\"forecast_accuracy_2023\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.047664Z", "completed_at": "2025-03-12T22:17:08.244266Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.295726Z", "completed_at": "2025-03-12T22:17:08.718348Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9179422855377197, "adapter_response": {}, "message": "Runtime Error in model bond_payment_info (models/bond_payment_info.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_operations_statement/*.parquet\"", "failures": null, "unique_id": "model.mta.bond_payment_info", "compiled": true, "compiled_code": "WITH payment_stats AS (\n    SELECT\n        general_ledger,\n        MIN(timestamp) AS first_payment_date,\n        MAX(timestamp) AS last_payment_date,\n        AVG(amount) AS average_payment,\n        COUNT(DISTINCT timestamp) AS total_payments,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY amount) AS median_payment\n    FROM\n        \"data\".\"main\".\"mta_operations_statement\"\n    WHERE\n        scenario = 'Actual'\n        AND type = 'Debt Service Expenses'\n    GROUP BY\n        general_ledger\n),\nfirst_payment AS (\n    SELECT\n        general_ledger,\n        MIN(timestamp) AS first_payment_date,\n        (SELECT amount FROM mta_operations_statement WHERE general_ledger = fp.general_ledger AND timestamp = MIN(fp.timestamp)) AS first_payment_amount\n    FROM\n        mta_operations_statement fp\n    WHERE\n        scenario = 'Actual'\n        AND type = 'Debt Service Expenses'\n    GROUP BY\n        general_ledger\n),\nlast_payment AS (\n    SELECT\n        general_ledger,\n        MAX(timestamp) AS last_payment_date,\n        (SELECT amount FROM mta_operations_statement WHERE general_ledger = lp.general_ledger AND timestamp = MAX(lp.timestamp)) AS last_payment_amount\n    FROM\n        mta_operations_statement lp\n    WHERE\n        scenario = 'Actual'\n        AND type = 'Debt Service Expenses'\n    GROUP BY\n        general_ledger\n)\n-- Wrapping everything inside another DISTINCT query\nSELECT DISTINCT\n    ps.general_ledger,\n    fp.first_payment_date,\n    fp.first_payment_amount,\n    ps.last_payment_date,\n    lp.last_payment_amount,\n    ps.average_payment,\n    ps.median_payment,\n    ps.total_payments\nFROM\n    payment_stats ps\nLEFT JOIN\n    first_payment fp ON ps.general_ledger = fp.general_ledger\nLEFT JOIN\n    last_payment lp ON ps.general_ledger = lp.general_ledger\nORDER BY\n    ps.general_ledger", "relation_name": "\"data\".\"main\".\"bond_payment_info\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.221650Z", "completed_at": "2025-03-12T22:17:08.276511Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.471862Z", "completed_at": "2025-03-12T22:17:08.798356Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.927682638168335, "adapter_response": {}, "message": "Runtime Error in model omny_adoption_by_station (models/omny_adoption_by_station.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_hourly_subway_socrata/*.parquet\"", "failures": null, "unique_id": "model.mta.omny_adoption_by_station", "compiled": true, "compiled_code": "WITH yearly_data AS (\n    SELECT \n        station_complex,\n        YEAR(transit_timestamp) AS year,\n        SUM(CASE WHEN payment_method = 'omny' THEN ridership ELSE 0 END) * 1.0 / SUM(ridership) AS omny_percentage\n    FROM \n        \"data\".\"main\".\"mta_hourly_subway_socrata\"\n    WHERE \n        YEAR(transit_timestamp) IN (2022, 2023, 2024)\n    GROUP BY \n        station_complex, \n        YEAR(transit_timestamp)\n),\npivoted_data AS (\n    SELECT \n        station_complex,\n        MAX(CASE WHEN year = 2022 THEN omny_percentage ELSE NULL END) AS omny_2022,\n        MAX(CASE WHEN year = 2023 THEN omny_percentage ELSE NULL END) AS omny_2023,\n        MAX(CASE WHEN year = 2024 THEN omny_percentage ELSE NULL END) AS omny_2024\n    FROM \n        yearly_data\n    GROUP BY \n        station_complex\n)\nSELECT \n    station_complex,\n    omny_2022,\n    omny_2023,\n    omny_2024,\n    CASE \n        WHEN omny_2022 IS NOT NULL AND omny_2023 IS NOT NULL THEN \n            (omny_2023 - omny_2022) / omny_2022\n        ELSE NULL\n    END AS omny_2023_growth,\n    CASE \n        WHEN omny_2023 IS NOT NULL AND omny_2024 IS NOT NULL THEN \n            (omny_2024 - omny_2023) / omny_2023\n        ELSE NULL\n    END AS omny_2024_growth\nFROM \n    pivoted_data\nORDER BY \n    station_complex", "relation_name": "\"data\".\"main\".\"omny_adoption_by_station\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.229476Z", "completed_at": "2025-03-12T22:17:08.294162Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.480071Z", "completed_at": "2025-03-12T22:17:08.866173Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.9619224071502686, "adapter_response": {}, "message": "Runtime Error in model omny_adoption_increase (models/omny_adoption_increase.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_hourly_subway_socrata/*.parquet\"", "failures": null, "unique_id": "model.mta.omny_adoption_increase", "compiled": true, "compiled_code": "WITH omny_ridership_by_station_year AS (\n    -- Calculate the OMNY ridership and total ridership for each station in 2023 and 2024, including latitude and longitude\n    SELECT \n        station_complex_id, \n        station_complex, \n        latitude, \n        longitude, \n        EXTRACT(YEAR FROM transit_timestamp) AS year, \n        SUM(CASE WHEN payment_method = 'omny' THEN ridership ELSE 0 END) AS omny_ridership,\n        SUM(ridership) AS total_ridership\n    FROM \n        \"data\".\"main\".\"mta_hourly_subway_socrata\"\n    WHERE \n        EXTRACT(YEAR FROM transit_timestamp) IN (2023, 2024)\n    GROUP BY \n        station_complex_id, station_complex, latitude, longitude, year\n),\nomny_percentage_by_station AS (\n    -- Calculate the OMNY percentage for each station in 2023 and 2024, including latitude and longitude\n    SELECT \n        station_complex_id, \n        station_complex, \n        latitude, \n        longitude, \n        year, \n        (omny_ridership / total_ridership) AS omny_percentage\n    FROM \n        omny_ridership_by_station_year\n)\nSELECT \n    s2023.station_complex_id AS station_id, \n    s2023.station_complex AS station_name,\n    s2023.latitude,\n    s2023.longitude,\n    s2023.omny_percentage AS omny_percentage_2023,\n    s2024.omny_percentage AS omny_percentage_2024,\n    (s2024.omny_percentage - s2023.omny_percentage) AS omny_percentage_increase\nFROM \n    omny_percentage_by_station s2023\nJOIN \n    omny_percentage_by_station s2024 \n    ON s2023.station_complex_id = s2024.station_complex_id\n    AND s2023.latitude = s2024.latitude\n    AND s2023.longitude = s2024.longitude\n    AND s2023.year = 2023\n    AND s2024.year = 2024\nWHERE \n    s2024.omny_percentage > s2023.omny_percentage\nORDER BY \n    omny_percentage_increase DESC", "relation_name": "\"data\".\"main\".\"omny_adoption_increase\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.238551Z", "completed_at": "2025-03-12T22:17:08.411313Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.487653Z", "completed_at": "2025-03-12T22:17:08.869301Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.9611515998840332, "adapter_response": {}, "message": "Runtime Error in model subway_station_stats (models/subway_station_stats.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_hourly_subway_socrata/*.parquet\"", "failures": null, "unique_id": "model.mta.subway_station_stats", "compiled": true, "compiled_code": "WITH ridership_by_day AS (\n    -- Calculate daily ridership for each station, weekday/weekend split\n    SELECT \n        station_complex,\n        CAST(transit_timestamp AS DATE) AS day,\n        DAYOFWEEK(transit_timestamp) AS weekday,\n        SUM(ridership) AS daily_ridership,\n        SUM(transfers) AS daily_transfers,\n        MIN(latitude) AS latitude,   -- Add latitude\n        MIN(longitude) AS longitude  -- Add longitude\n    FROM \n        \"data\".\"main\".\"mta_hourly_subway_socrata\"\n    WHERE \n        YEAR(transit_timestamp) = 2024\n    GROUP BY \n        station_complex, \n        CAST(transit_timestamp AS DATE), \n        DAYOFWEEK(transit_timestamp)\n),\ntotal_riders_ytd AS (\n    -- Total riders in 2023 and 2024 YTD\n    SELECT \n        station_complex,\n        SUM(CASE WHEN YEAR(transit_timestamp) = 2023 THEN ridership ELSE 0 END) AS total_riders_2023,\n        SUM(CASE WHEN YEAR(transit_timestamp) = 2024 THEN ridership ELSE 0 END) AS total_riders_2024,\n        MIN(latitude) AS latitude,   -- Add latitude\n        MIN(longitude) AS longitude  -- Add longitude\n    FROM \n        \"data\".\"main\".\"mta_hourly_subway_socrata\"\n    WHERE \n        YEAR(transit_timestamp) IN (2023, 2024)\n    GROUP BY \n        station_complex\n),\nweekday_weekend AS (\n    -- Calculate weekday vs. weekend ridership and percentage of transfers\n    SELECT \n        station_complex,\n        CASE \n            WHEN weekday IN (2, 3, 4, 5, 6) THEN 'weekday'\n            ELSE 'weekend'\n        END AS day_type,\n        AVG(daily_ridership) AS avg_ridership,\n        SUM(daily_transfers) * 1.0 / SUM(daily_ridership) AS transfer_percentage\n    FROM \n        ridership_by_day\n    GROUP BY \n        station_complex, \n        CASE \n            WHEN weekday IN (2, 3, 4, 5, 6) THEN 'weekday'\n            ELSE 'weekend'\n        END\n),\nsingle_day_stats AS (\n    -- Highest and lowest single day ridership\n    SELECT \n        station_complex,\n        MAX(daily_ridership) AS highest_single_day_ridership,\n        MIN(daily_ridership) AS lowest_single_day_ridership\n    FROM \n        ridership_by_day\n    GROUP BY \n        station_complex\n),\nhighest_single_day AS (\n    -- Day with highest single day ridership\n    SELECT \n        station_complex,\n        day AS highest_single_day_ridership_day\n    FROM \n        ridership_by_day rbd\n    WHERE \n        rbd.daily_ridership = (\n            SELECT \n                MAX(daily_ridership)\n            FROM \n                ridership_by_day\n            WHERE \n                station_complex = rbd.station_complex\n        )\n),\nlowest_single_day AS (\n    -- Day with lowest single day ridership\n    SELECT \n        station_complex,\n        day AS lowest_single_day_ridership_day\n    FROM \n        ridership_by_day rbd\n    WHERE \n        rbd.daily_ridership = (\n            SELECT \n                MIN(daily_ridership)\n            FROM \n                ridership_by_day\n            WHERE \n                station_complex = rbd.station_complex\n        )\n)\nSELECT \n    rbd.station_complex,\n    MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.avg_ridership END) AS avg_weekday_ridership,\n    MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.avg_ridership END) AS avg_weekend_ridership,\n    sds.highest_single_day_ridership,\n    hsd.highest_single_day_ridership_day,\n    sds.lowest_single_day_ridership,\n    lsd.lowest_single_day_ridership_day,\n    MAX(ty.total_riders_2023) AS total_riders_2023,\n    MAX(ty.total_riders_2024) AS total_riders_2024,\n    MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.transfer_percentage END) AS weekday_transfer_percentage,\n    MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.transfer_percentage END) AS weekend_transfer_percentage,\n    (MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.avg_ridership END) - MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.avg_ridership END)) * 1.0 / MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.avg_ridership END) AS weekend_ridership_percentage_change,\n    (MAX(CASE WHEN wwd.day_type = 'weekend' THEN wwd.transfer_percentage END) - MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.transfer_percentage END)) * 1.0 / MAX(CASE WHEN wwd.day_type = 'weekday' THEN wwd.transfer_percentage END) AS weekend_transfer_percentage_change,\n    MAX(rbd.latitude) AS latitude,   -- Add latitude\n    MAX(rbd.longitude) AS longitude  -- Add longitude\nFROM \n    ridership_by_day rbd\nJOIN \n    weekday_weekend wwd ON rbd.station_complex = wwd.station_complex\nJOIN \n    single_day_stats sds ON rbd.station_complex = sds.station_complex\nJOIN \n    highest_single_day hsd ON rbd.station_complex = hsd.station_complex\nJOIN \n    lowest_single_day lsd ON rbd.station_complex = lsd.station_complex\nJOIN \n    total_riders_ytd ty ON rbd.station_complex = ty.station_complex\nGROUP BY \n    rbd.station_complex, \n    sds.highest_single_day_ridership, \n    sds.lowest_single_day_ridership, \n    hsd.highest_single_day_ridership_day, \n    lsd.lowest_single_day_ridership_day\nORDER BY \n    rbd.station_complex", "relation_name": "\"data\".\"main\".\"subway_station_stats\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.257363Z", "completed_at": "2025-03-12T22:17:08.442207Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.505305Z", "completed_at": "2025-03-12T22:17:08.876373Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.9646871089935303, "adapter_response": {}, "message": "Runtime Error in model weekly_riders_per_station (models/weekly_riders_per_station.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_hourly_subway_socrata/*.parquet\"", "failures": null, "unique_id": "model.mta.weekly_riders_per_station", "compiled": true, "compiled_code": "WITH weekly_ridership AS (\n    SELECT \n        station_complex, \n        DATE_TRUNC('week', transit_timestamp) AS week_start,\n        SUM(ridership) AS total_weekly_ridership,\n        MIN(latitude) AS latitude,  -- Assuming latitude is the same for each station complex, use MIN() or MAX()\n        MIN(longitude) AS longitude  -- Assuming longitude is the same for each station complex, use MIN() or MAX()\n    FROM \n        \"data\".\"main\".\"mta_hourly_subway_socrata\"\n    GROUP BY \n        station_complex, \n        DATE_TRUNC('week', transit_timestamp)\n),\nweekly_weather AS (\n    SELECT \n        DATE_TRUNC('week', date) AS week_start,\n        AVG(temperature_mean) AS avg_weekly_temperature,\n        SUM(precipitation_sum) AS total_weekly_precipitation\n    FROM \n        \"data\".\"main\".\"daily_weather_asset\"\n    GROUP BY \n        DATE_TRUNC('week', date)\n)\nSELECT \n    wr.station_complex, \n    wr.week_start, \n    wr.total_weekly_ridership,\n    wr.latitude,\n    wr.longitude,\n    ww.avg_weekly_temperature,\n    ww.total_weekly_precipitation\nFROM \n    weekly_ridership wr\nLEFT JOIN \n    weekly_weather ww\nON \n    wr.week_start = ww.week_start\nWHERE \n    wr.week_start < '2024-09-17'\nORDER BY \n    wr.station_complex, \n    wr.week_start", "relation_name": "\"data\".\"main\".\"weekly_riders_per_station\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-03-12T22:17:08.247754Z", "completed_at": "2025-03-12T22:17:08.444365Z"}, {"name": "execute", "started_at": "2025-03-12T22:17:08.516493Z", "completed_at": "2025-03-12T22:17:08.908318Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.9804625511169434, "adapter_response": {}, "message": "Runtime Error in model total_riders_per_station (models/total_riders_per_station.sql)\n  IO Error: No files found that match the pattern \"/home/christiandata/mtadata/data/opendata/mta_hourly_subway_socrata/*.parquet\"", "failures": null, "unique_id": "model.mta.total_riders_per_station", "compiled": true, "compiled_code": "SELECT \n    station_complex_id, \n    station_complex, \n    latitude, \n    longitude, \n    SUM(ridership) AS total_ridership\nFROM \n    \"data\".\"main\".\"mta_hourly_subway_socrata\"\nGROUP BY \n    station_complex_id, station_complex, latitude, longitude\nORDER BY \n    total_ridership DESC", "relation_name": "\"data\".\"main\".\"total_riders_per_station\""}], "elapsed_time": 1.489764928817749, "args": {"exclude": [], "enable_legacy_logger": false, "introspect": true, "log_path": "/home/christiandata/mtadata/mta/transformations/dbt/target/dbt_project_assets-d078115-ce8fd5f", "cache_selected_only": false, "log_file_max_bytes": 10485760, "use_colors": true, "exclude_resource_types": [], "indirect_selection": "eager", "require_resource_names_without_spaces": false, "include_saved_query": false, "defer": false, "empty": false, "project_dir": "/home/christiandata/mtadata/mta/transformations/dbt", "log_level": "info", "show": false, "populate_cache": true, "target_path": "target/dbt_project_assets-d078115-ce8fd5f", "vars": {}, "macro_debugging": false, "write_json": true, "require_explicit_package_overrides_for_builtin_materializations": true, "send_anonymous_usage_stats": false, "print": true, "favor_state": false, "log_format": "json", "static_parser": true, "log_level_file": "debug", "source_freshness_run_project_hooks": false, "show_resource_report": false, "partial_parse": true, "which": "build", "log_format_file": "json", "profiles_dir": "/home/christiandata/mtadata/mta/transformations/dbt", "strict_mode": false, "export_saved_queries": false, "select": ["fqn:*"], "invocation_command": "dbt build --select fqn:*", "printer_width": 80, "use_colors_file": true, "warn_error_options": {"include": [], "exclude": []}, "resource_types": [], "quiet": false, "version_check": true, "partial_parse_file_diff": true}}